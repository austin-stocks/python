

##=============================================================================
-- how to setup GIT directory 
## Go to the directory and execute the following commands (here I am assuming the directory is Lastest_Charts)
AzureAD+SundeepChadha@LaptopOffice-T480 MINGW64 /c/Sundeep/Stocks_Automation/Latest_Charts (master)
$ echo "# Latest_Charts" >> README.md

AzureAD+SundeepChadha@LaptopOffice-T480 MINGW64 /c/Sundeep/Stocks_Automation/Latest_Charts (master)
$ git init
Initialized empty Git repository in C:/Sundeep/Stocks_Automation/Latest_Charts/.git/

AzureAD+SundeepChadha@LaptopOffice-T480 MINGW64 /c/Sundeep/Stocks_Automation/Latest_Charts (master)
$ git add README.md
warning: LF will be replaced by CRLF in README.md.
The file will have its original line endings in your working directory

AzureAD+SundeepChadha@LaptopOffice-T480 MINGW64 /c/Sundeep/Stocks_Automation/Latest_Charts (master)
$ git commit -m "First commit"
[master (root-commit) 6fe6ac2] First commit
 1 file changed, 1 insertion(+)
 create mode 100644 README.md

AzureAD+SundeepChadha@LaptopOffice-T480 MINGW64 /c/Sundeep/Stocks_Automation/Latest_Charts (master)
$ git remote add origin https://github.com/austin-stocks/Latest_Charts.git

## Then you can start adding/commit other files 
##=============================================================================

##=============================================================================
If you want to clone the directory into a local machine - simply execute this command
$ git clone  https://github.com/austin-stocks/Latest_Charts.git
This will create a directory Latest_Charts and put stuff in there 
##=============================================================================

-- Set notepad++ as the editor
git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"


-- This is a file that to get some shortcuts etc going for git education

--==============================================================================
-- To make git reflog give out the dates of the hashes and make it look pretty 
--==============================================================================
-- This gives more relevant information...maybe I just don't know right now 
-- how to format the other reflog command 
$ git reflog --pretty='%h %cd %gd %gs'

-- This one is pretty but seems like it misses some information
$ git reflog --format='%C(auto)%h %<|(17)%gd %C(red)%ci%C(reset) %s'

--==============================================================================


git fetch origin
git diff HEAD..origin or 
git diff --name-only HEAD..origin

git merge origin



$ git reflog
...
abc987  HEAD@{0}: merge activity
b58aae8 HEAD@{1}: fetch origin/branch
8f3a362 HEAD@{2}: activity before the fetch
...
$ git reset --hard HEAD{2}

--==============================================================================
-- How to find out what files were changed in a commit 
-- Prefered - This shows cleaner output
git diff-tree --no-commit-id --name-only -r <sha>
-- Shows more information -- the actual diff - which can be cluttery  
git show <sha>
git show --pretty="" --name-only <sha>    
--==============================================================================

--==============================================================================
-- How to find git hash corresponding to a commit message
git log --grep "Your_message_here"
--==============================================================================


